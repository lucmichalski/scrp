// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.12.0
// source: scrape.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The request message containing the user's name.
type ScrapeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Domain   string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Filter   string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Seq      string `protobuf:"bytes,5,opt,name=seq,proto3" json:"seq,omitempty"`
	Status   int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Mid      string `protobuf:"bytes,7,opt,name=mid,proto3" json:"mid,omitempty"`
	Attempts int32  `protobuf:"varint,8,opt,name=attempts,proto3" json:"attempts,omitempty"`
	Sched    string `protobuf:"bytes,9,opt,name=sched,proto3" json:"sched,omitempty"`
	Size     int64  `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ScrapeRequest) Reset() {
	*x = ScrapeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrape_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeRequest) ProtoMessage() {}

func (x *ScrapeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scrape_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeRequest.ProtoReflect.Descriptor instead.
func (*ScrapeRequest) Descriptor() ([]byte, []int) {
	return file_scrape_proto_rawDescGZIP(), []int{0}
}

func (x *ScrapeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScrapeRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ScrapeRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ScrapeRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ScrapeRequest) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *ScrapeRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ScrapeRequest) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *ScrapeRequest) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *ScrapeRequest) GetSched() string {
	if x != nil {
		return x.Sched
	}
	return ""
}

func (x *ScrapeRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// The response message containing the greetings
type ScrapeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ScrapeReply) Reset() {
	*x = ScrapeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrape_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeReply) ProtoMessage() {}

func (x *ScrapeReply) ProtoReflect() protoreflect.Message {
	mi := &file_scrape_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeReply.ProtoReflect.Descriptor instead.
func (*ScrapeReply) Descriptor() ([]byte, []int) {
	return file_scrape_proto_rawDescGZIP(), []int{1}
}

func (x *ScrapeReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_scrape_proto protoreflect.FileDescriptor

var file_scrape_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x3f, 0x0a, 0x07, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x28, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x66, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x0b, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scrape_proto_rawDescOnce sync.Once
	file_scrape_proto_rawDescData = file_scrape_proto_rawDesc
)

func file_scrape_proto_rawDescGZIP() []byte {
	file_scrape_proto_rawDescOnce.Do(func() {
		file_scrape_proto_rawDescData = protoimpl.X.CompressGZIP(file_scrape_proto_rawDescData)
	})
	return file_scrape_proto_rawDescData
}

var file_scrape_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_scrape_proto_goTypes = []interface{}{
	(*ScrapeRequest)(nil), // 0: proto.ScrapeRequest
	(*ScrapeReply)(nil),   // 1: proto.ScrapeReply
}
var file_scrape_proto_depIdxs = []int32{
	0, // 0: proto.Scraper.Scrape:input_type -> proto.ScrapeRequest
	1, // 1: proto.Scraper.Scrape:output_type -> proto.ScrapeReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_scrape_proto_init() }
func file_scrape_proto_init() {
	if File_scrape_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scrape_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrapeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrape_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrapeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scrape_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scrape_proto_goTypes,
		DependencyIndexes: file_scrape_proto_depIdxs,
		MessageInfos:      file_scrape_proto_msgTypes,
	}.Build()
	File_scrape_proto = out.File
	file_scrape_proto_rawDesc = nil
	file_scrape_proto_goTypes = nil
	file_scrape_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ScraperClient is the client API for Scraper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScraperClient interface {
	// Sends a greeting
	Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeReply, error)
}

type scraperClient struct {
	cc grpc.ClientConnInterface
}

func NewScraperClient(cc grpc.ClientConnInterface) ScraperClient {
	return &scraperClient{cc}
}

func (c *scraperClient) Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeReply, error) {
	out := new(ScrapeReply)
	err := c.cc.Invoke(ctx, "/proto.Scraper/Scrape", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScraperServer is the server API for Scraper service.
type ScraperServer interface {
	// Sends a greeting
	Scrape(context.Context, *ScrapeRequest) (*ScrapeReply, error)
}

// UnimplementedScraperServer can be embedded to have forward compatible implementations.
type UnimplementedScraperServer struct {
}

func (*UnimplementedScraperServer) Scrape(context.Context, *ScrapeRequest) (*ScrapeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scrape not implemented")
}

func RegisterScraperServer(s *grpc.Server, srv ScraperServer) {
	s.RegisterService(&_Scraper_serviceDesc, srv)
}

func _Scraper_Scrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServer).Scrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Scraper/Scrape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServer).Scrape(ctx, req.(*ScrapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scraper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Scraper",
	HandlerType: (*ScraperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scrape",
			Handler:    _Scraper_Scrape_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrape.proto",
}
